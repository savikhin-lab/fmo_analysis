from dataclasses import dataclass
from pathlib import Path
import numpy as np
from typing import List, Tuple


@dataclass(frozen=True)
class Config:
    xfrom: int
    xto: int
    xstep: int
    bandwidth: float
    shift_diag: float
    pignums: int
    delete_pig8: bool
    dip_cor: float
    delete_pig: int
    use_shift_T: bool
    scale: bool
    ignore_offdiagonal_shifts: bool
    overwrite: bool


@dataclass
class Pigment:
    pos: np.ndarray
    mu: np.ndarray


def parse_conf_file(config: Config, cf_path: Path) -> Tuple[np.ndarray, List[Pigment]]:
    """Extract the Hamiltonian and pigment data from a 'conf*.csv' file."""
    n_pigs = config.pignums
    arr = np.loadtxt(cf_path)
    rows, cols = arr.shape
    if (rows != n_pigs) or (cols != n_pigs + 6):
        raise ValueError(f"Expected conf file with dimensions {n_pigs}x{n_pigs + 6}, found {rows}x{cols}")
    ham = arr[:, :n_pigs]
    mus = arr[:, -6:-3]
    coords = arr[:, -3:]
    pigments = [Pigment(np.array(c), np.array(m)) for c, m in zip(coords, mus)]
    return ham, pigments


def save_stick_spectrum(parent_dir: Path, stick_result, overwrite):
    """Saves the result of computing a stick spectrum to disk.
    
    This saves 5 files:
    - 'energies.csv'
    - 'eigenvectors.csv'
    - 'exciton_mus.csv'
    - 'stick_abs.csv'
    - 'stick_cd.csv'

    The convention for the data stored in each file is that row X in each file
    corresponds to the same exciton. For example, the first entry in 'energies.csv'
    is the energy of the first exciton, and the first ROW in 'eigenvectors.csv' is
    the eigenvector of the first exciton. This means that the array in 'eigenvectors.csv'
    is stored in the transposed order from how it is generated by np.linalg.eig().
    """
    dir_name = stick_result["file"].stem + "-stick"
    outdir = parent_dir / dir_name
    outdir.mkdir(exist_ok=True)
    np.savetxt(outdir / "energies.csv", stick_result["e_vals"], delimiter=",")
    np.savetxt(outdir / "eigenvectors.csv", stick_result["e_vecs"].T, delimiter=",")
    np.savetxt(outdir / "exciton_mus.csv", stick_result["exciton_mus"], delimiter=",")
    np.savetxt(outdir / "stick_abs.csv", stick_result["stick_abs"], delimiter=",")
    np.savetxt(outdir / "stick_cd.csv", stick_result["stick_cd"], delimiter=",")